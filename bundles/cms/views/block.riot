<block>
  <div class={ classes({ 'eden-block' : true, 'eden-block-admin' : eden.get('user.acl.validate')('admin') && !props.preview }) } data-block={ props.block.uuid } id={ `block-${props.block.uuid}` }>

    <div class={ `eden-block-hover${props.isContainer ? ' eden-block-hover-dropzone' : ''}` } if={ eden.get('user.acl.validate')('admin') && !props.preview }>
      <div class="row row-eq-height">
        <div class="col-8 d-flex align-items-center">
          <div class="w-100">
            <slot name="header" />
          </div>
        </div>
        <div class="col-4 d-flex align-items-center">
          <div class="w-100">
            <div class="btn-group float-right">
              <slot name="buttons" />
              <button class="btn btn-sm btn-secondary" onclick={ (e) => onUpdateSidebar(e) }>
                <i class="fa fa-pencil-alt" />
              </button>
              <button class="btn btn-sm btn-secondary" onclick={ (e) => onRemoveSidebar(e) }>
                <i class={ classes({ 'fa fa-times' : true, 'fa-spin' : removing || props.block.removing }) } />
              </button>
              <span class="btn btn-sm btn-secondary move" for={ props.block.uuid }>
                <i class="fa fa-arrows-alt" />
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <slot name="body" />
  </div>

  <div class={ classes({ 'd-none' : !(showing && eden.get('user.acl.validate')('admin') && !props.preview) }) }>
    <div class="eden-blocks-backdrop" onclick={ (e) => ohHideSidebar(e) } />
    
    <div class={ classes({ 'eden-blocks-sidebar' : true, 'eden-blocks-sidebar-show' : get('sidebar.update') }) }>
      <div class="card">
        <div class="card-header">
          <h5 class="m-0">
            Update Block
          </h5>
        </div>
        <div class="card-body">
          <div class="form-group">
            <label>
              Block Class
            </label>
            <input class="form-control" ref="class" value={ props.block.class || '' } onchange={ (e) => onClass(e) } />
          </div>
          <slot name="modal" />
          <slot name="options" />
        </div>
        <div class="card-footer">
          <button class={ classes({ 'btn btn-secondary float-right' : true, 'disabled' : removing }) } onclick={ (e) => ohHideSidebar(e) }>
            Close
          </button>
        </div>
      </div>
    </div>
    
    <div class={ classes({ 'eden-blocks-sidebar' : true, 'eden-blocks-sidebar-show' : get('sidebar.remove') }) }>
      <div class="card">
        <div class="card-header">
          <h5 class="m-0">
            Remove Block
          </h5>
        </div>
        <div class="card-body">
          Are you sure you want to remove this block?
        </div>
        <div class="card-footer">
          <button class={ classes({ 'btn btn-danger' : true, 'disabled' : removing }) } onclick={ (e) => onRemove(e) } disabled={ removing }>
            { removing ? 'Removing...' : 'Remove' }
          </button>
          <button class={ classes({ 'btn btn-secondary float-right' : true, 'disabled' : removing }) } onclick={ (e) => ohHideSidebar(e) }>
            Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // import base
    import Base from './js/base';

    // export block
    export default class Block extends Base {

      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // run super
        super.onBeforeMount(...arguments);
      }

      /**
       * on before update
       *
       * @param {Object} props
       */
      onBeforeUpdate(props) {
        // run super
        super.onBeforeUpdate(...arguments);

        // check frontend
        if (!this.eden.frontend) return;

        // remove editing
        if (!this.showing && !this.get('sidebar.update') && (this.props.editing === this.props.block.uuid)) {
          // set editing
          this.props.block.editing = false;

          // set false
          this.props.onEditing(false);
        }
      }

      /**
      * on update modal
      *
      * @param  {Event} e
      */
      onUpdateSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = true;

        // update view
        this.update();
        
        // set editing
        this.props.onEditing(this.props.block);

        // update view
        this.update({
          sidebar : {
            update : true,
            remove : false,
          }
        });
      }

      /**
      * on remove modal

      * @param  {Event} e
      */
      onRemoveSidebar (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = true;

        // update view
        this.update();

        // update view
        this.update({
          sidebar : {
            update : false,
            remove : true,
          }
        });
      }

      /**
      * on remove modal

      * @param  {Event} e
      */
      ohHideSidebar(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.showing = false;

        // update view
        this.update();

        // update view
        this.update({
          sidebar : {
            update : false,
            remove : false,
          }
        });
      }

      /**
      * on class

      * @param  {Event} e
      */
      async onClass (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set class
        this.props.block.class = e.target.value.length ? e.target.value : null;

        // run opts
        if (this.props.onSave) await this.props.onSave(this.props.block, this.props.data, this.props.placement);
      }

      /**
      * on refresh
      *
      * @param  {Event} e
      */
      async onRemove (e) {
        // set refreshing
        this.removing = true;

        // update view
        this.update();

        // run opts
        if (this.props.onRemove) await this.props.onRemove(this.props.block, this.props.data, this.props.placement);

        // set refreshing
        this.removing = false;

        // update view
        this.update();
      }
    }
  </script>
</block>
