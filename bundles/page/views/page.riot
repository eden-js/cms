<page-page>
  <div class="cms-placement-blocks" data-placement={ get('item.id') || 'page' } data-is="eden-blocks" placement={ page.get('placement') || {} } for="frontend" blocks={ props.blocks } on-save={ onPlacement } position={ get('item.id') || 'page' } preview={ !eden.get('user.acl.validate')('admin') } />

  <script>
    // import base
    import Base from './js/base';

    /**
     * export default page
     */
    export default class PagePage extends Base {
      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // set this
        this.type = props.type;
        this.page = this.eden.model.get('page', props.item, props.item.id);
      
        // set to placements
        if (this.page.id) this.eden.set('placements.' + this.page.id, this.page.get('placement'));
      }

      /**
      * set placement
      *
      * @param  {Placement} placement
      */
      async onPlacement (placement) {
        // check id
        if (placement.get('id') !== (this.page.get('placement') || {}).id) {
          // update placement
          this.page.set('placement', placement.get());

          // save
          await this.savePage(this.page);
        }
      }

      /**
      * saves page
      *
      * @param  {Object}  page
      *
      * @return {Promise}
      */
      async savePage (page) {
        // set loading
        this.loading.save = true;

        // update view
        this.update();

        // check type
        if (!page.type) page.set('type', opts.type);

        // set input values
        jQuery('[data-input]', this.refs.form).each((i, elem) => {
          // set value
          page.set(jQuery(elem).attr('data-input'), jQuery(elem).val());
        });

        // log data
        let res = await fetch('/admin/page/' + (page.get('id') ? page.get('id') + '/update' : 'create'), {
          'body'    : JSON.stringify(this.page.get()),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let data = await res.json();

        // set logic
        for (let key in data.result) {
          // clone to page
          page.set(key, data.result[key]);
        }

        // set loading
        this.loading.save = false;

        // update view
        this.update();
      }
    }
  </script>
</page-page>
