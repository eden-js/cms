<upload>
  <div if={ props.showType === 'input' }>
    
    <div class="d-inline" each={ (file, i) in value }>
      <input type="hidden" if={ file.id } name={ props.name + (multi ? '[' + i + ']' : '') } value={ file.id } class="file-input">
      <div class="btn-group mr-2 mb-2">
        <a class="btn btn-secondary text-overflow" href={ media.url(file) } target="_blank">
          { file.name }
        </a>
        <button onclick={ (e) => onRemove(e, file, i) } class="btn btn-danger">
          <i class="fa fa-times" />
        </button>
      </div>
    </div>

    <div class="progress my-3" each={ (file, i) in value } if={ typeof file.uploaded !== 'undefined' }>
      <div class="progress-bar bg-success" role="progressbar" style={ `width:${file.uploaded}%` } aria-valuenow={ file.uploaded } aria-valuemin="0" aria-valuemax="100"></div>
    </div>

    <div class="custom-file" if={ !value.length || multi }>
      <input type="file" class="custom-file-input" id={ props.name } onchange={ (e) => onUpload(e) } multiple={ multi }>
      <label class="custom-file-label" for={ props.name }>
        Choose File
      </label>
    </div>
  </div>
  <div class="row row-eq-height upload upload-images" if={ props.showType === 'box' || !props.showType }>
    <div each={ (file, i) in value } class={ `${props.col || 'col-6 col-md-4 col-xl-3'} form-group-image mb-2` }>
      <div class="card card-outline-primary" style={ !props.type || props.type === 'image' ? 'background-image: url(' + thumb(file) + ')' : '' }>
        <span class="btn-group p-0" if={ multi }>
          <button onclick={ (e) => onPrev(e, i) } class="btn btn-primary">
            <i class="fa fa-chevron-left" />
          </button>
          <button onclick={ (e) => onNext(e, i) } class="btn btn-primary">
            <i class="fa fa-chevron-right" />
          </button>
        </span>
        <a href="#!" onclick={ (e) => onRemove(e, file, i) } class="btn btn-danger">
          <i class="fa fa-times" />
        </a>
        <input type="hidden" if={ file.id } name={ props.name + (multi ? '[' + i + ']' : '') } value={ file.id } class="file-input">
        <div class="progress" if={ file.uploaded }>
          <div class="progress-bar bg-success" role="progressbar" style={ `width : ${file.uploaded}%;` } aria-valuenow={ file.uploaded } aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        
        <a href={ media.url(file) } class="name" target="_blank">{ file.name }</a>
      </div>
    </div>
    <div class={ `${props.col || 'col-6 col-md-4 col-xl-3'} mb-2` } if={ multi || !value.length }>
      <label class="card card-outline-success card-upload" for={ props.name }>
        <input type="file" ref="file" id={ props.name } name={ props.name } class="file-input" multiple={ multi } onchange={ (e) => onUpload(e) }>
        <div class="d-flex align-items-center">
          <div>
            <i class="fa fa-plus" />
            <div class="upload-label" class="mt-2">
              Upload { props.type || 'Image' }
            </div>
          </div>
        </div>
      </label>
    </div>
  </div>

  <script>
    // import dependencies
    import Base from '../js/base';
    import media from 'asset/public/js/bootstrap';

    // export default
    export default class Upload extends Base {

      /**
       * on before mount
       */
      onBeforeMount(props) {
        // run super
        super.onBeforeMount(...arguments);
            
        // set value
        // this.name    = props.name || 'image';
        this.multi   = props.multi;
        this.media   = media;
        this.value   = props.image ? (Array.isArray(props.image) ? props.image : [props.image]) : [];
        this.change  = false;
        this.removed = [];
      }


      /**
       * on before update
       */
      onBeforeUpdate(props) {
        // run super
        super.onBeforeUpdate(...arguments);

        // check if frontend
        if (!this.eden.frontend) return true;

        // check new
        let images = props.image ? (Array.isArray(props.image) ? props.image : [props.image]) : [];

        // set value
        this.value.push(...images.filter((image) => {
          // find
          return (!this.value.find((img) => img.id === image.id)) && this.removed.indexOf(image.id) === -1;
        }));
      }

      /**
       * src of file
       *
       * @param {Object} file
       */
      src (file) {
        // return thumb if exists
        if (!file.id) return file.src;

        // return file
        return media.url(file);
      }

      /**
       * thumb of file
       *
       * @param {Object} file
       */
      thumb (file) {
        // return thumb if exists
        if (file.thumb) return file.thumb;

        // return file
        return media.url(file, '3x-sq');
      }

      /**
       * on next
       *
       * @param  {Event} e
       */
      onNext (e, i) {
        // prevent default
        e.preventDefault();

        // splice to new position
        this.value.splice((i + 1), 0, this.value.splice(i, 1)[0]);

        // update
        this.update();
      }

      /**
       * on next
       *
       * @param  {Event} e
       */
      onPrev (e, i) {
        // prevent default
        e.preventDefault();

        // splice to new position
        this.value.splice((i - 1), 0, this.value.splice(i, 1)[0]);

        // update
        this.update();
      }

      /**
       * on remove function
       *
       * @param {Event} e
       */
      onRemove (e, file, i) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // loop values
        this.removed.push(file.id || file.temp);

        // set value
        this.value.splice(i, 1);

        // update view
        this.update();
      }

      /**
       * upload function
       *
       * @param {Event} e
       *
       * @private
       */
      onUpload (e) {
        // check files
        if (e.target.files.length === 0) {
          // alert
          return eden.alert.alert('error', 'Please set files');
        }
        
        // require uuid
        const uuid = require('uuid');

        // loop files
        for (var i = 0; i < e.target.files.length; i++) {
          // set file
          let fl = e.target.files[i];

          // create new reader
          let fr = new FileReader();

          // onload
          fr.onload = () => {
            // let value
            let value = {
              'src'      : fr.result,
              'file'     : fl,
              'name'     : fl.name,
              'size'     : fl.size,
              'temp'     : uuid(),
              'thumb'    : fr.result,
              'uploaded' : 0
            };

            // add to value
            this.value.push(value);

            // do upload
            this._ajaxUpload(value);

            // update view
            this.update();
          };

          // read file
          fr.readAsDataURL(fl);
        }
      }

      /**
       * get name
       */
      getName() {
        // map
        return this.value.map((val) => val.name).join(', ');
      }

      /**
       * updates value
       *
       * @param {Value} val
       */
      _update (val) {
        // let id
        let id = val.id;

        // check uuid
        if (val.temp) id = val.temp;

        // loop values
        for (var i = 0; i < this.value.length; i++) {
          // check value
          if (this.value[i].id === id || this.value[i].temp === id) {
            // set value
            this.value[i] = val;

            // return update
            return this.update();
          }
        }
      }

      /**
       * remove value from upload
       *
       * @param {Object} val
       *
       * @private
       */
      _remove (val) {
        // let id
        let id = val.id;

        // check uuid
        if (val.temp) id = val.temp;

        // loop values
        for (var i = 0; i < this.value.length; i++) {
          // check value
          if (this.value[i].id === id || this.value[i].temp === id) {
            // set value
            this.value.splice(i, 1);

            // return update
            return this.update();
          }
        }
      }

      /**
       * ajax upload function
       *
       * @param {Object} value
       *
       * @private
       */
      _ajaxUpload (value) {
        // require uuid
        const uuid = require('uuid');
        
        // let change
        this.change = uuid();

        // set change
        let change = this.change;

        // create form data
        let data = new FormData();

        // append image
        data.append('file', value.file);
        data.append('temp', value.temp);

        // submit ajax form
        this.loading(value.temp, new Promise((resolve, reject) => {
          
          // ajax request
          jQuery.ajax({
            'url' : `/media/${this.props.type || 'image'}`,
            'xhr' : () => {
              // get the native XmlHttpRequest object
              var xhr = jQuery.ajaxSettings.xhr();
    
              // set the onprogress event handler
              xhr.upload.onprogress = (evt) => {
                // log progress
                let progress = (evt.loaded / evt.total) * 100;
    
                // set progress
                value.uploaded = progress;
    
                // update
                this._update(value);
              };
    
              // return the customized object
              return xhr;
            },
            'data'  : data,
            'type'  : 'post',
            'cache' : false,
            'error' : () => {
              // do error
              this.eden.get('alert.error')('Error uploading image');
    
              // remove from array
              this._remove(value);
            },
            'success' : (data) => {
              // empty file upload
              if (change === this.change) {
                // reset file
                if (this.$('[ref="file"]')) this.$('[ref="file"]').value = null;
              }
    
              // check if error
              if (data.error) {
                // error
                reject(data.message);
                
                // do message
                return this.eden.get('alert.error')(data.message);
              }
    
              // check if image
              if (data.upload) this._update(data.upload);
              
              // resolve
              resolve(data.upload);
            },
            'dataType'    : 'json',
            'contentType' : false,
            'processData' : false
          });
        }));

        // await done
        this.loading(value.temp).then((done) => {
          // done
          this.loading(value.temp, false);
        });
      }
    }
  </script>
</upload>
